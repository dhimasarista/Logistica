<style>
blockquote{
 font-size: 12px; 
 color: red;  
}
.offcanvas {
    height: 100%;
    width: 0;
    position: fixed;
    z-index: 1000; /* Mengatur nilai z-index yang lebih tinggi */
    top: 0;
    right: 0;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    overflow-x: hidden;
    transition: 0.5s;
    padding-top: 60px;
}

.offcanvas .body-offcanvas {
    padding: 0px 32px;
    text-decoration: none;
    color: #818181;
    display: block;
    transition: 0.3s;
}

.offcanvas a:hover {
    color: #f1f1f1;
}

.offcanvas .closebtn {
    position: absolute;
    top: 0;
    padding: 8px 32px;
    font-size: 24px;
    margin-right: 50px;
}
</style>
<script>
    function openOffcanvas(id) {
        const odProductName = document.getElementById("order-detail-product-name");
        const odProductPrice = document.getElementById("order-detail-product-price");
        const odBuyer = document.getElementById("order-detail-buyer");
        const odNumberPhone = document.getElementById("order-detail-number-phone");
        const odAddress = document.getElementById("order-detail-address");
        const odStatus = document.getElementById("order-detail-status");
        const odQuantity = document.getElementById("order-detail-quantity");
        const odTotalPrice = document.getElementById("order-detail-total-price");

        const actionDetail = document.getElementById("action-detail");

        Swal.fire({
            title: 'Loading!',
            html: 'Please wait...',
            icon: 'info',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });
        fetch(`/order/detail/${id}`)
        .then(response => response.json())
        .then(results => {
            Swal.close(); // Close the loading alert after some time
            if (results.status !== 200) {
                InternalServerError(results.error)
                return 0;    
            }
            document.getElementById("myOffcanvas").style.width = "350px";
            document.getElementById("order-main-content").style.marginRight = "350px";
            odProductName.innerHTML = results.data.product.name.String.toUpperCase();
            odProductPrice.innerHTML = formatRupiah(results.data.product.price.Int64);
            odBuyer.innerHTML = results.data.buyer.String.toUpperCase();
            odNumberPhone.innerHTML = results.data.number_phone_buyer.String;
            odAddress.innerHTML = results.data.shipping_address.String;
            odStatus.innerHTML = results.data.order_status.name.String;
            odQuantity.innerHTML = `Quantity = ${results.data.pieces.Int64}`;
            odTotalPrice.innerHTML = `Total Price = ${formatRupiah(results.data.total_price.Int64)}`;
            actionDetail.innerHTML = results.action_detail;
        })
        .catch(error => {
            Swal.close(); // Close the loading alert after some time
            ErrorNotif(error);
        })
    }

    function closeOffcanvas() {
        document.getElementById("myOffcanvas").style.width = "0";
        document.getElementById("order-main-content").style.marginRight = "0";
    }
</script>
<div id="myOffcanvas" class="offcanvas">
    <a href="javascript:void(0)" class="closebtn" onclick="closeOffcanvas()">Ã—</a>
    <div class="body-offcanvas">
        <h5>Product Detail</h5>
        <table class="table table-sm table-bordered table-striped" width="100%" cellspacing="0">
            <tbody>
                <tr>
                    <td>Name</td>
                    <td id="order-detail-product-name"></td>
                </tr>
                <tr>
                    <td>Price</td>
                    <td id="order-detail-product-price"></td>
                </tr>
            </tbody>
        </table>
        <blockquote>
            *this is the current price, if the purchase calculation is different, then its
            <cite> <b>the old price</b></cite>.
        </blockquote>
        <h5>Order Detail</h5>
        <table class="table table-sm table-bordered table-striped" width="100%" cellspacing="0">
            <tbody>
                <tr>
                    <td>Buyer</td>
                    <td id="order-detail-buyer"></td>
                </tr>
                <tr>
                    <td>No. Phone</td>
                    <td id="order-detail-number-phone"></td>
                </tr>
                <tr>
                    <td>Address</td>
                    <td id="order-detail-address"></td>
                </tr>
                <tr>
                    <td>Status</td>
                    <td id="order-detail-status" class="alert alert-primary" role="alert"></td>
                </tr>
            </tbody>
        </table>
        <h5>Payment</h5>
        <div id="order-detail-quantity"></div>
        <div id="order-detail-total-price"></div>
        <br>
        <div id="action-detail"></div>
    </div>
    <script>
        function processOrder(id, status) {
            Swal.fire({
                title: "Next Process?",
                text: "Make sure the data is correct!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Loading!',
                        html: 'Please wait...',
                        icon: 'info',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                    const data = {
                        order_id: id,
                        status: status,
                    }
                    fetch(`/order/next`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(data)
                    })
                    .then(response => response.json())
                    .then(results => {
                        console.log(results);
                        Swal.close();
                        if (results.status !== 200) {
                            Swal.fire({
                                icon: "error",
                                title: results.error,
                            })
                            return 0;
                        } else {
                            Swal.fire({
                                icon: "success",
                                title: "Success",
                                text: results.message,
                            })
                            .then((result2) => {
                                // Mereload halaman setelah tombol OK diklik
                                if (result2.isConfirmed || result2.isDismissed) {
                                    window.location.reload();
                                }
                                return 0;
                            });
                        }
                    })
                    .catch(error => {
                        Swal.close();
                        Swal.fire({
                            icon: "error",
                            title: results.error,
                        })
                    })
                }
            })
        }
    </script>
</div>
<div class="container-fluid" id="order-main-content">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Orders</h1>
        <div id="add-stocks-button"><a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i>New Order</i></a></div>
        <div id="return-button" hidden><a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i>Return</i></a></div>
    </div>
    <!-- DataTales Example -->
    <div class="card shadow mb-4" id="card-products">
        <div class="card">
            <div class="card-header py-3">
                <ul class="nav nav-tabs" style="border-bottom: none;">
                    <li class="nav-item">
                        <a class="nav-link active" id="ongoing-tab" data-toggle="tab" href="#on-going-button" style="background: none; border: none;">On Going</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="finished-tab" data-toggle="tab" href="#finished-button" style="background: none; border: none;">Finished</a>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                <div class="tab-content">
                    <div class="tab-pane fade show active" id="on-going-button">
                        <!-- On Going Content -->
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover table-striped" id="orderGoingTable" width="100%" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Product Name</th>
                                        <th>Total Order</th>
                                        <th>Price</th>
                                        <th>Status</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{#order_ongoing}}
                                    <tr>
                                        <td>{{updated_at}}</td>
                                        <td>{{product_name}}</td>
                                        <td>{{pieces}}</td>
                                        <td>{{total_price}}</td>
                                        <td><h6 class="badge order-status">{{order_status}}</h6></td>
                                        <td class="text-center">
                                            <a href="javascript:void(0);" onclick="openOffcanvas('{{id}}')">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><path fill="currentColor" d="M19 19V5H5v14zm0-16a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2zm-8 4h2v4h4v2h-4v4h-2v-4H7v-2h4z"/></svg>
                                            </a>
                                        </td>
                                    </tr>
                                    {{/order_ongoing}}
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="finished-button">
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover table-striped" id="orderFinishTable" width="100%" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Product Name</th>
                                        <th>Total Order</th>
                                        <th>Price</th>
                                        <th>Status</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{#order_finish}}
                                    <tr>
                                        <td>{{updated_at}}</td>
                                        <td>{{product_name}}</td>
                                        <td>{{pieces}}</td>
                                        <td>{{total_price}}</td>
                                        <td><h6 class="badge order-status">{{order_status}}</h6></td>
                                        <td class="text-center">
                                            <a href="javascript:void(0);" onclick="openOffcanvas('{{id}}')">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><path fill="currentColor" d="M19 19V5H5v14zm0-16a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2zm-8 4h2v4h4v2h-4v4h-2v-4H7v-2h4z"/></svg>
                                            </a>
                                        </td>
                                    </tr>
                                    {{/order_finish}}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        const orderStatusBadges = document.querySelectorAll(".order-status")
        orderStatusBadges.forEach(badge => {
            const orderStatusText = badge.innerText.toLowerCase(); // Ambil dan ubah teks menjadi huruf kecil

            // Tambahkan kelas sesuai dengan nilai teks
            switch (orderStatusText) {
                case "on process":
                    badge.classList.add("badge-dark");
                    break;
                case "on delivery":
                    badge.classList.add("badge-info");
                    break;
                case "received":
                    badge.classList.add("badge-success");
                    break;
                case "returned":
                    badge.classList.add("badge-warning");
                    break;
                case "fail":
                    badge.classList.add("badge-danger");
                    break;
                default:
                    badge.classList.add("badge-secondary");
                    break;
            }
        });
    </script>
    <div class="card shadow mb-4" id="card-add-stocks" hidden>
        <div class="card">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Add Stock</h6>
            </div>
            <div class="card-body">
                <div class="form-wrap">	
                    <form id="survey-form">
                        <div class="row">
                            <div class="col-md-12">
                            <div id="existing-product">
                                    <div class="form-group">
                                        <label id="product-label" for="product_name">Product Name</label>
                                        <select class="form-control scrollable-menu" id="product-name" name="productName" onfocus="this.size=1;" onchange='this.size=1;'>
                                            <option value="" selected disabled>Select Product</option>
                                            {{#products}}
                                                <option value="{{id}}" data-price="{{price}}">{{name}} | stocks: {{stocks}}</option>
                                            {{/products}}
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="buyer-label" for="buyer">Buyer</label>
                                    <input type="pengirim" name="buyer" id="buyer-form" class="form-control" placeholder="Ex: Anto"/>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="pieces_label" for="Pieces">Order Quantity</label>
                                    <input type="number" name="Pieces" id="pieces-form" placeholder="EX: 100" class="form-control">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="pengirim-label" for="stock">Number Phone</label>
                                    <input type="stock" name="stock" id="number-phone-buyer" class="form-control" placeholder="Ex: 1024"/>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="address_label" for="pengirim">Address</label>
                                    <input type="pengirim" name="address" id="address-buyer" class="form-control" placeholder="Ex: 2.240.000 (IDR)"/>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-2">
                                <button id="submit-order" class="btn btn-primary" type="button">
                                    <span id="loading-order" class="spinner-border-sm" role="status" style="margin-bottom: 10%;">Order</span>
                                </button>
                            </div>
                        </div>

                    </form>
                </div>	
            </div>
        </div>
        
    </div>
</div>
<!-- Modal Order -->
<div class="modal fade" id="confirm-order-modal" tabindex="-1" role="dialog" aria-labelledby="confirm-order-modalLabel" aria-hidden="true">
    <div class="modal-dialog" style="max-width: 50%; top: 70px" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title placeholder col-6" id="confirm-order-modalLabel">Order Detail</h5>
          <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body" id="id-employee-edit">
            <h6>Product : <span id="order-product-name"></span></h6>
            <h6>Price  : <span id="order-product-price"></span></h6>
            <h5>Total <span id="total-order"></span></h5>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" id="confirm-order" class="btn btn-primary">Confirm</button>
        </div>
      </div>
    </div>
</div>
<script>
    const productName = document.getElementById("product-name");
    const buyerForm = document.getElementById("buyer-form");
    const piecesForm = document.getElementById("pieces-form");
    const numberPhoneBuyer = document.getElementById("number-phone-buyer")
    const addressBuyer = document.getElementById("address-buyer");
    
    const orderProductName = document.getElementById("order-product-name");
    const orderProductPrice = document.getElementById("order-product-price");
    const totalOrder = document.getElementById("total-order");

    const orderLoading = document.getElementById("loading-order");
    const submitOrder = document.getElementById("submit-order");

    submitOrder.addEventListener("click", (e) => {
        e.preventDefault();
        const isFormEmpty = buyerForm.value === "" || piecesForm.value === "" || numberPhoneBuyer.value === "" || addressBuyer.value === ""
        if (isFormEmpty) {
            ErrorNotif("Form is Empty!");
            return 0;
        }
        orderLoading.innerText = "";
        orderLoading.classList.add("spinner-border");

        const data = {
            idProduct: productName.value,
            quantity: piecesForm.value
        }

        fetch("/order/calculate", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(results => {
            console.log(results);
            if (results.status != 200) {
                ErrorNotif(results.error);
                orderLoading.innerText = "Order";
                orderLoading.classList.remove("spinner-border");
                return 0;
            }
            else {
                orderLoading.innerText = "Order";
                orderLoading.classList.remove("spinner-border");

                $('#confirm-order-modal').modal('show');
                orderProductName.innerText = results.data.name; 
                orderProductPrice.innerText = results.data.price;
                totalOrder.innerText = `${piecesForm.value} x ${results.data.price} = ${results.data.payment}`;
            }
        })
        .catch(error => {
            console.error(error);
            orderLoading.innerText = "Order";
            orderLoading.classList.remove("spinner-border");
        })
    })
</script>
<script>
    // Confirm Order
    const confirmOrder = document.getElementById("confirm-order");

    confirmOrder.addEventListener("click", () => {
        confirmOrder.setAttribute("disabled", true)
        const data = {
            idProduct: productName.value,
            quantity: piecesForm.value,
            buyer: buyerForm.value,
            numberPhone: numberPhoneBuyer.value,
            address: addressBuyer.value
        }
        fetch("/order/new", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(results => {
            console.log(results);
            confirmOrder.removeAttribute("disabled");
            if (results.status !== 200) {
                Swal.fire({
                    icon: "error",
                    title: results.error,
                })
                return 0;
            }
            Swal.fire({
                icon: "success",
                title: "Success",
                text: results.message,
                html: `
                    <a href="${results.midtrans["redirect_url"]}" target="_blank">Link Pembayaran</a>
                `,
            })
            .then((result2) => {
                // Mereload halaman setelah tombol OK diklik
                if (result2.isConfirmed || result2.isDismissed) {
                    window.location.reload();
                }
                return 0;
            });
        })
        .catch(error => {
            console.error(error);
            confirmOrder.removeAttribute("disabled");
        })
    })
</script>
<script>
    $(document).ready(function() {
        $('#orderFinishTable').DataTable();
    });
    document.addEventListener('DOMContentLoaded', function() {
        const orderGoingTable = $('#orderGoingTable').DataTable({
            "order": [[0, 'desc']] // Mengurutkan berdasarkan kolom pertama secara menaik
        });
    });
</script>
<script>
    const cardProducts = document.getElementById("card-products");
    const cardAddStocks = document.getElementById("card-add-stocks");
    const addStocksButton = document.getElementById("add-stocks-button")
    // const inventoryButton = document.getElementById("inventory-button");
    const returnButton = document.getElementById("return-button")

    addStocksButton.addEventListener("click", () => {
        cardAddStocks.removeAttribute("hidden");
        returnButton.removeAttribute("hidden");
        addStocksButton.setAttribute("hidden", true);
        cardProducts.setAttribute("hidden",true)
    });
    returnButton.addEventListener("click", () => {
        cardAddStocks.setAttribute("hidden", true);
        returnButton.setAttribute("hidden", true);
        addStocksButton.removeAttribute("hidden");
        cardProducts.removeAttribute("hidden");
    });
</script>