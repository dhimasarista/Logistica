<script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
<script>
    let notyf = new Notyf({
        duration: 2000,
        dismissible: true,
        position: {
            x: "right",
            y: "top"
        }
    });
</script>
<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Employees</h1>
        <div id="new-employee-button"><a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i>New Employee</i></a></div>
        <div id="return-button" hidden><a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i>Return</i></a></div>
    </div>
    <!-- DataTales Example -->
    <div class="card shadow mb-4" id="card-employee-list" hidden>
        <div class="card">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">List</h6>
            </div>
            <div class="card-body" id="employee-list">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover table-striped" id="dataTable" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>ID Employee</th>
                                <th>Name</th>
                                <th>Position</th>
                                <th>No. Phone</th>
                                <th>Address</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#employees}}
                            <tr id="employee-{{id}}">
                                <td>{{id}}</td>
                                <td>{{name}}</td>
                                <td>{{positionName}}</td>
                                <td>{{numberPhone}}</td>
                                <td>{{address}}</td>    
                                <td>
                                    <div class="dropdown">
                                        <a href="javascript:void(0);">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="m16.475 5.408l2.117 2.117m-.756-3.982L12.109 9.27a2.118 2.118 0 0 0-.58 1.082L11 13l2.648-.53c.41-.082.786-.283 1.082-.579l5.727-5.727a1.853 1.853 0 1 0-2.621-2.621Z"/><path d="M19 15v3a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h3"/></g></svg>
                                        </a>
                                        <a href="javascript:void(0);" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 20 20"><g fill="currentColor"><circle cx="10" cy="15" r="2"/><circle cx="10" cy="10" r="2"/><circle cx="10" cy="5" r="2"/></g></svg>
                                        </a>
                                
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                            <a class="dropdown-item" href="javascript:void(0);">Detail</a>
                                            <a class="dropdown-item" href="#" onclick="deleteEmployee('{{id}}')">Remove</a>
                                            <!-- Tambahkan opsi dropdown lainnya sesuai kebutuhan -->
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            {{/employees}}
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-body" id="new-employee-form">
            </div>
        </div>
    </div>
    <div class="card shadow mb-4" id="card-new-employee" hidden>
        <div class="card">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">New Employee</h6>
            </div>
            <div class="card-body">
                <div class="form-wrap">	
                    <form id="survey-form">
                        <div class="row" id="new-product-input" >
                            <div class="col-md-6">
                                <label id="id-employee-label" for="id-employee">ID Employee</label>
                                <div class="input-group mb-3">
                                    <input type="number" name="id-employee" id="id-employee-form" class="form-control" disabled required>
                                    <div class="input-group-append">
                                      <a href="#" class="input-group-text" id="button-custom-id-employee" onclick="customIdEmployee()">custom</a>
                                      <a href="#" class="input-group-text" id="button-cancel-custom-id-employee" onclick="cancelCustomIdEmployee()" style="display: none;">cancel</a>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="name-employee-label" for="name">Full Name</label>
                                    <input type="text" name="name" id="name-employee-form" class="form-control" placeholder="Your Name" required>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="number-phone-label" for="numberPhone">Number Phone</label>
                                    <input type="text" name="numberPhone" id="number-phone-form" class="form-control" placeholder="Your Number Phone" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="address-label" for="address">Address</label>
                                    <input type="text" name="address" id="address-form" class="form-control" placeholder="Your Address" required/>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div id="existing-position">
                                    <div class="form-group">
                                        <label id="position-label" for="product_name">Job Position</label>
                                        <select class="form-control scrollable-menu" id="position-name" name="position" required onfocus="this.size=1;" onchange='this.size=1;'>
                                            <option value="" selected disabled>Select Position</option>
                                            <!-- <option value="newPosition">New Position</option> -->
                                            {{#positions}}
                                                <option value="{{id}}">{{name}}</option>
                                            {{/positions}}
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="pengirim-label" for="new-position">ID Card | Max: 200kb Type: JPG/JPEG/PNG</label>
                                    <div class="input-group mb-3">
                                        <div id="image-operation-spinner" class="spinner-border text-muted" hidden></div>
                                        <input type="file" id="id-card-form" accept="image/*">
                                        <div class="col-md-6 mt-1">
                                            <div id="delete-idcardform" style="display: none;">
                                                <a href="#"  class="px-1 badge badge-danger" id="button-delete-idcard">
                                                    <i>
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><path fill="currentColor" d="M7 21q-.825 0-1.412-.587T5 19V6H4V4h5V3h6v1h5v2h-1v13q0 .825-.587 1.413T17 21H7Zm2-4h2V8H9v9Zm4 0h2V8h-2v9Z"/></svg>
                                                    </i>
                                                </a>
                                                <span id="idcard-filename"></span>
                                            </div>
                                        </div>
                                      </div>
                                    </div>
                            </div>
                            <script>
                                const idCardForm = document.getElementById("id-card-form");  // Part of 7 Input Form
                                const deleteIdCardForm = document.getElementById("delete-idcardform");

                                const buttonDeleteIdCard = document.getElementById("button-delete-idcard");
                                const idCardFilename = document.getElementById("idcard-filename");
                                const imagesTypes = ["image/jpg", "image/jpeg", "image/png"];
                                const imageSpinner = document.getElementById("image-operation-spinner");

                                function showFormIDCard(){
                                    imageSpinner.setAttribute('hidden', true);
                                    deleteIdCardForm.style.display = "none";
                                    idCardForm.style.display = "block";
                                    idCardFilename.textContent = null;
                                    idCardForm.value = "";
                                }
                                function clearIdCardForm() {
                                    if (idCardForm.files["length"] > 0) {
                                        deleteIdCardForm.style.display = "none";
                                        idCardForm.style.display = "block";
                                        idCardFilename.textContent = null;
                                        idCardForm.value = "";
                                    }
                                    return 0;
                                }

                                function uploadIDCardToServer(path, file) {
                                    const formData = new FormData();
                                    formData.append("image", file);
                                    fetch(path, {
                                        method: "POST",
                                        body: formData,
                                    })
                                    .then(response => response.json())
                                    .then(results => {
                                        console.log(results);
                                        if (results.status !== 200) {
                                            notyf.open({
                                                type: "error",
                                                background: "orange",
                                                message: results.error,
                                            });
                                        }
                                        notyf.open({
                                            type: "success",
                                            message: results.message,
                                        })

                                        idCardFilename.textContent = idCardForm.files[0]["name"];
                                        deleteIdCardForm.style.display = "block";
                                        imageSpinner.setAttribute('hidden', true);
                                    })
                                    .catch(error => {
                                        console.log(error);
                                        notyf.open({
                                            type: "error",
                                            background: "orange",
                                            message: error, 
                                        });
                                        showFormIDCard(); // Menampilkan Form ID Card
                                        return 0;
                                    });
                                }

                                function deleteImageFromServer(path) {
                                    fetch(path, {
                                        method: "DELETE",
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                    })
                                    .then(response => response.json())
                                    .then(results => {
                                        console.log(results);
                                        if (results.status !== 200) {
                                            notyf.open({
                                                type: "error",
                                                message: results.error, 
                                            });
                                            return 0;
                                        }
                                        notyf.open({
                                            type: "success",
                                            message: results.message,
                                        });
                                        return results.status;
                                    })
                                    .catch(error => {
                                        console.error(error);
                                        notyf.open({
                                            type: "error",
                                            background: "orange",
                                            message: error, 
                                        });
                                    });
                                }

                                function deleteImageIdCard() {
                                    idCardFilename.setAttribute("hidden", true);
                                    imageSpinner.removeAttribute("hidden");
                                    
                                    const path = `/delete/image/${idCardForm.files[0]["name"]}`;
                                    deleteImageFromServer(path); // Menghapus gambar dari server

                                    imageSpinner.setAttribute("hidden", true);
                                }

                                idCardForm.addEventListener("change", () => {
                                    const file = idCardForm.files[0];
                                    checkFileType(file, imagesTypes, "Change the Image format", idCardForm);
                                    checkFileSize(idCardForm);

                                    imageSpinner.removeAttribute("hidden");
                                    idCardForm.style.display = "none";

                                    if (idCardForm.files[0]) {
                                        // Mengirim ID Card dalam gambar ke server
                                        uploadIDCardToServer("/upload/image", file);
                                    }
                                });
                                // Menghapus gambar melalui button delete image
                                buttonDeleteIdCard.addEventListener("click", () => {
                                    deleteImageIdCard();
                                    clearIdCardForm();
                                });
                                // Menghapus gambar ketika event reload halaman/pindah path/menutup tab atau browser
                                window.addEventListener("beforeunload", (e) => {
                                    if (idCardForm.files[0]) {
                                        e.preventDefault(); // Menggunakan parameter e
                                        e.returnValue = "You have unsaved changes. Are you sure you want to leave?"; // Pesan prompt

                                        const userResponse = confirm(e.returnValue);

                                        if (userResponse) {
                                            // Memanggil fungsi-fungsi yang sesuai
                                            const status = deleteImageIdCard(); // Menghapus gambar dari server
                                            if (status !== 200) {
                                                notyf.open({
                                                    type: "error",
                                                    message: "Error Internal Server", 
                                                });
                                                e.returnValue = undefined;
                                            }
                                        } else {
                                            // Jika pengguna memilih "Cancel", lepaskan penahanan
                                            e.returnValue = undefined;
                                        }
                                    }
                                });
                            </script>
                        </div>
                        <div class="row">
                            <div class="col-md-2">
                                <button type="submit" id="submit-new-employee" class="btn btn-primary btn-block">Upload</button>
                            </div>
                        </div>

                    </form>
                </div>	
            </div>
        </div>
    </div>
    <div class="card shadow mb-4" id="card-spinners">
        <div class="card">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Loading...</h6>
            </div>
            <div class="card-body text-center">
                <div class="spinner-border text-primary m-5" role="status" style="width: 3rem; height: 3rem;">
                    <span class="sr-only">Loading...</span>
                </div>
                <div id="message-loading-card"></div>
                <br>
            </div>
        </div>
    </div>
    <script>
        // 7 Input Form
        const idEmployeeForm = document.getElementById("id-employee-form");
        const nameEmployeeForm = document.getElementById("name-employee-form");
        const numberPhoneForm = document.getElementById("number-phone-form");
        const addressForm = document.getElementById("address-form");
        const positionselect = document.getElementById("position-name");


        // Mengambil id employee terakhir di db
        // const lastIdEmploye = 100293;
        let newIdEmployee; 
        // idEmployeeForm.value = newIdEmployee; // Menambahkan id dengan kalkulasi id terakhir + 1

        const buttonCustomIdEmployee = document.getElementById("button-custom-id-employee");
        const buttonCancelCustomIdEmployee = document.getElementById("button-cancel-custom-id-employee");
        function customIdEmployee(){
            checkSession(); // checking session to server
            idEmployeeForm.value = newIdEmployee;
            idEmployeeForm.removeAttribute("disabled");
            buttonCustomIdEmployee.style.display = "none";
            buttonCancelCustomIdEmployee.style.display = "block";
        }

        function cancelCustomIdEmployee() {
            idEmployeeForm.value = newIdEmployee;
            idEmployeeForm.setAttribute("disabled", true);
            buttonCustomIdEmployee.style.display = "block";
            buttonCancelCustomIdEmployee.style.display = "none";

            getNewId();
        }
    </script>
</div>
<script>
    // Card Body Handlers
    const cardEmployeeList = document.getElementById("card-employee-list");
    const cardNewEmployee = document.getElementById("card-new-employee");
    const newEmployeeButton = document.getElementById("new-employee-button")
    const returnButton = document.getElementById("return-button");
    const cardSpinner = document.getElementById("card-spinners");
    const msgLoadingCard = document.getElementById("message-loading-card")

    // Fungsi-fungsi yang  berisi http-get
    function getNewId() {
        checkSession(); // checking session to server
        fetch("/employee/newId")
        .then(response => response.json())
        .then(results => {
            if (results.responseStatus === 200) {
                cardNewEmployee.removeAttribute("hidden");
                cardSpinner.setAttribute("hidden", true);

                newIdEmployee = results.newId;
                idEmployeeForm.value = results.newId; // Menambahkan id dengan kalkulasi id terakhir + 1
            }
        });
    }

    function deleteEmployee(id) {
        checkSession(); // checking session to server

        fetch(`/employee/delete/${id}`, {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json"
            },
        })
        .then(response => response.json())
        .then(results => {
            if (results.responseStatus !== 200){
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: results.error,
                });
                return 0
            }
            notyf.open({
                type: "success",
                message: results.message,
            })
            document.getElementById(`employee-${id}`).remove();
        })
        .catch(error => {
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: error,
            });
        })
    }

    // const employee = `{{employees}}`;
    const responseStatus = `{{responseStatus}}`
    if (responseStatus === "200") {
        cardEmployeeList.removeAttribute("hidden");
        cardSpinner.setAttribute("hidden", true);
    }

    newEmployeeButton.addEventListener("click", () => {
        checkSession(); // checking session to server
        cardSpinner.removeAttribute("hidden");
        newEmployeeButton.setAttribute("hidden", true);
        cardEmployeeList.setAttribute("hidden",true);

        getNewId();
        returnButton.removeAttribute("hidden");
    });
    /*
        7 Input Form
        - idEmployeeForm 
        - nameEmployeeForm 
        - numberPhoneForm 
        - addressForm
        - positionselect
        - idCardForm
        - addToBeUserForm
    */ 

    function showEmployeeList() {
        checkSession(); // checking session to server
        newEmployeeButton.removeAttribute("hidden");
        cardEmployeeList.removeAttribute("hidden");
        
        returnButton.setAttribute("hidden", true);
        cardNewEmployee.setAttribute("hidden", true);
    }
    // Event akan di panggil ketika form tidak kosong
    returnButton.addEventListener("click", () => {
        checkSession(); // checking session to server
        // Jika input file == 1 hapus file dari input dan server /uploads
        if (idCardForm.files["length"] > 0) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, cancel it!"
            }).then((result) => {   
                if (result.isConfirmed) {
                    // Mengosongkan 7 Input Form
                    cancelCustomIdEmployee(); // ID Employee Form
                    nameEmployeeForm.value = null;
                    numberPhoneForm.value = null;
                    addressForm.value = null;
                    deleteImageIdCard();
                    clearIdCardForm();
                    showEmployeeList();
                    return 0;
                }
            });
        }
        if (idCardForm.files["length"] === 0) {
            showEmployeeList();
            return 0;
        }
    });



    // Submit New Employee
    document.getElementById("submit-new-employee").addEventListener("click", (e) => {
        // if (!(/^[0-9]+$/.test(idEmployeeForm.value))) {
        //     return 0;
        // }
        e.preventDefault();
        checkSession(); // checking session to server
        fetch(`/employee/check/${idEmployeeForm.value}`)
        .then(response => response.json())
        .then(results => {
            if (results.isIdExists) {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "ID has been used!",
                });
            } else {
                Swal.fire({
                    title: "Add employee?",
                    text: "Make sure the data is correct!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes"
                }).then((result) => {
                    if (result.isConfirmed) {
                        const newEmployeeData = {
                            id: idEmployeeForm.value,
                            name: nameEmployeeForm.value,
                            numberPhone: numberPhoneForm.value,
                            address: addressForm.value,
                            position: positionselect.value,
                        };
                        fetch("/employee/new", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(newEmployeeData)
                        })
                        .then(response => response.json())
                        .then( results => {
                            console.log(results);
                            if (results.status !== 200) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: `${results.error}`,
                                });
                                return 0;
                            } 

                            Swal.fire({
                                icon: "success",
                                title: "Success",
                                text: `New Employee: ${results.data["name"]}`,
                            })
                            .then((result) => {
                                // Mereload halaman setelah tombol OK diklik
                                if (result.isConfirmed || result.isDismissed) {
                                    window.location.reload();
                                }
                            });
                        })
                        .catch(error => {
                            console.error(error);
                        })
                    }
                    return 0;
                });
            }
        })
        .catch(error => {
            console.error(error);
        })
    });
</script>