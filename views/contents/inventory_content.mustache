<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Inventory</h1>
        <div id="add-stocks-button"><a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i>Add Stocks</i></a></div>
        <div id="return-button" hidden><a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i>Return</i></a></div>
    </div>
    <!-- DataTales Example -->
    <div class="card shadow mb-4" id="card-products">
        <div class="card">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Products</h6>
            </div>
            <div class="card-body" id="surat-masuk">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover table-striped" id="dataTable" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Manufacturer</th>
                                <th>Name</th>
                                <th>Serial Number</th>
                                <th>Stocks</th>
                                <th>Price</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                        {{#products}}
                            <tr id="product-{{id}}">
                                <td>{{manufacturer}}</td>
                                <td>{{name}}</td>
                                <td>{{serial_number}}</td>
                                <td>{{stocks}}</td>
                                <td>{{price}}</td>
                                <td>
                                    <div class="dropdown">
                                        <a href="javascript:void(0);" data-toggle="modal" data-target="#editProductModal" onclick="GetDataByID(parseInt('{{id}}'))">
                                            edit
                                        </a>
                                        <a href="javascript:void(0);" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 20 20"><g fill="currentColor"><circle cx="10" cy="15" r="2"/><circle cx="10" cy="10" r="2"/><circle cx="10" cy="5" r="2"/></g></svg>
                                        </a>
                                
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                            <a class="dropdown-item" href="javascript:void(0);">Detail</a>
                                            <div class="dropdown-divider"></div>
                                            <a class="dropdown-item" href="javascript:void(0);" onclick="deletePorduct(parseInt('{{id}}'))">Remove</a>
                                            <!-- Tambahkan opsi dropdown lainnya sesuai kebutuhan -->
                                        </div>
                                        <script>
                                            function deletePorduct(id) {
                                                Swal.fire({
                                                    title: "Are you sure?",
                                                    text: "You won't be able to revert this!",
                                                    icon: "warning",
                                                    showCancelButton: true,
                                                    confirmButtonColor: "#3085d6",
                                                    cancelButtonColor: "#d33",
                                                    confirmButtonText: "Yes, delete it!"
                                                }).then((result) => {
                                                    if (result.isConfirmed) {
                                                        fetch(`/product/${id}`, {
                                                            method: "DELETE",
                                                            headers: {
                                                                "Content-Type": "application/json"
                                                            },
                                                        })
                                                        .then(response => response.json())
                                                        .then(results => {
                                                            console.log(results);
                                                            if (results.status !== 200){
                                                                InternalServerError(results.error);
                                                                return 0
                                                            }
                                                            ServerStatusOke(results.message); // Notify Succes
                                                            document.getElementById(`product-${id}`).remove();
                                                            return 0;
                                                        })
                                                        .catch(error => {
                                                            console.error(error);
                                                            ErrorNotif(error);
                                                        });
                                                    }
                                                })
                                            }
                                        </script>
                                    </div>
                                </td>
                            </tr>
                            {{/products}}
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-body" id="surat-keluar" style="display: none;">
            </div>
        </div>
    </div>
    


    <script>
        // document.getElementById('productForm').addEventListener('submit', function(event) {
        // event.preventDefault();

        // var productName = document.getElementById('productName').value;
        // var newProductName = document.getElementById('newProductName').value;

        // // Lakukan sesuatu dengan data formulir (misalnya, kirim ke server, tampilkan di halaman, dll.)
        // if (productName === 'newProduct' && newProductName.trim() !== '') {
        //     alert('Menambahkan produk baru: ' + newProductName);
        // } else {
        //     alert('Memilih produk: ' + productName);
        // }
        // });
    </script>
    <div class="card shadow mb-4" id="card-add-stocks" hidden>
        <div class="card">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Add Stock</h6>
            </div>
            <div class="card-body">
                <div class="form-wrap">	
                    <form id="inventory-form">
                        <div class="row">
                            <div class="col-md-12">
                            <div id="existing-product">
                                    <div class="form-group">
                                        <label id="judul-surat-label" for="product_name">Product Name</label>
                                        <select class="form-control scrollable-menu" id="product-name" name="productName" onchange="checkNewProduct()" onfocus="this.size=1;" onchange='this.size=1;' required>
                                            <option value="" selected disabled>Select Product</option>
                                            <option value="0">New Product</option>
                                            {{#products}}
                                                <option value="{{id}}">{{name}} | stocks: {{stocks}}</option>
                                            {{/products}}
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" id="new-product" style="display: none;">
                            <div class="col-md-12">
                                <label id="new-product-label" for="new-product">Product Name</label>
                                <div class="input-group mb-3">
                                    <!-- Change the type to "text" or remove the type attribute -->
                                    <input type="text" name="new-product" id="new-product-form" placeholder="EX: Intel i5 5600U" class="form-control" required>
                                    <div class="input-group-append">
                                        <a href="javascript:void(0);" class="input-group-text" id="button-cancel-new-product" onclick="cancelNewProduct()">cancel</a>
                                    </div>
                                </div>
                            </div>
                        </div>                        
                        <script>
                                const existingProduct = document.getElementById('existing-product');
                                const newProduct = document.getElementById('new-product');
                                function checkNewProduct() {
                                    // Input Form
                                    const productSelect = document.getElementById('product-name');
                                    const manufacturerForm = document.getElementById('manufacturer-form');
                                    const serialNumberForm = document.getElementById('serial-number-form');
                                    const priceForm = document.getElementById("price-form");
                                    const weightForm = document.getElementById("weight-form");
                                    const stockAmountForm = document.getElementById("stock-amount-form");
                                    const categoryForm = document.getElementById("category-form");

                                    serialNumberForm.setAttribute("aria-hidden", "true");
                                    priceForm.setAttribute("aria-hidden", "true");
                                    weightForm.setAttribute("aria-hidden", "true");

                                    // Mengambil semua opsi di manufacturer form
                                    const optionsManufacturer = manufacturerForm.options;
                                    const optionsCategory = categoryForm.options;

                                    if (productSelect.value === '0') {
                                        existingProduct.style.display = 'none';
                                        newProduct.style.display = 'block';

                                        serialNumberForm.value = null;
                                        manufacturerForm.selectedIndex = 0;
                                        categoryForm.selectedIndex = 0;

                                        priceForm.value = null;
                                        weightForm.value = null;
                                        stockAmountForm.value = null;

                                        serialNumberForm.removeAttribute("disabled");
                                        manufacturerForm.removeAttribute("disabled");
                                        categoryForm.removeAttribute("disabled");
                                        priceForm.removeAttribute("disabled");
                                        weightForm.removeAttribute("disabled");
                                    } else {
                                        // Membatalkan form new 
                                        cancelNewManufacturer(); 
                                        cancelNewCategory();

                                        existingProduct.style.display = 'block';
                                        newProduct.style.display = 'none';
           
                                        Swal.fire({
                                            title: 'Loading!',
                                            html: 'Please wait...',
                                            icon: 'info',
                                            allowOutsideClick: false,
                                            showConfirmButton: false,
                                            didOpen: () => {
                                                Swal.showLoading();
                                            }
                                        });
                                        fetch(`/product/${productSelect.value}`, {
                                            method: "GET",
                                            headers: {
                                                "Content-Type": "application/json"
                                            },
                                        })
                                        .then(res => res.json())
                                        .then(results => {
                                            console.log(results);
                                            Swal.close(); // Close the loading alert after some time
                                            serialNumberForm.value = results.data.serialNumber;
                                            serialNumberForm.setAttribute("disabled", true);
                                            priceForm.value = results.data.price;
                                            priceForm.setAttribute("disabled", true);
                                            weightForm.value = results.data.weight;
                                            weightForm.setAttribute("disabled", true);
                                            for (let index = 0; index < optionsManufacturer.length; index++) {
                                                if (results.data.manufacturerId === parseInt(optionsManufacturer[index].value)) {
                                                    manufacturerForm.selectedIndex = index;
                                                    manufacturerForm.setAttribute("disabled", true);
                                                }
                                            }
                                            for (let index = 0; index < optionsCategory.length; index++) {
                                                if (results.data.categoryId === parseInt(optionsCategory[index].value)) {
                                                    categoryForm.selectedIndex = index  ;
                                                    categoryForm.setAttribute("disabled", true);
                                                }
                                            }
                                            
                                        })
                                        .catch(error => {
                                            console.error(error);
                                        })
                                    }
                                }

                                function cancelNewProduct() {
                                    const productSelect = document.getElementById('product-name');
                                    const existingProduct = document.getElementById('existing-product');
                                    const newProduct = document.getElementById("new-product");
                                    const newProductForm = document.getElementById('new-product-form');

                                    const serialNumberForm = document.getElementById('serial-number-form');
                                    const manufacturerForm = document.getElementById('manufacturer_form');
                                    const priceForm = document.getElementById("price-form");
                                    const weightForm = document.getElementById("weight-form");
                                    const stockAmountForm = document.getElementById("stock-amount-form");

                                    serialNumberForm.value = null;
                                    // manufacturerForm.selectedIndex = 0;
                                    priceForm.value = null;
                                    weightForm.value = null;
                                    stockAmountForm.value = null;

                                    existingProduct.style.display = 'block';
                                    newProduct.style.display = 'none';   
                                    productSelect.selectedIndex = 0;

                                    // Menghapus form menjadi empty
                                    newProductForm.value = null;
                                    // cancelNewManufacturer(); // Membatalkan form new manufacturer
                                }
                        </script>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="serial_number_label" for="serialNumber">Serial Number</label>
                                    <input type="text" name="serialNumber" id="serial-number-form" placeholder="EX: S23864872548" class="form-control" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div id="existing-manufacturer">
                                    <div class="form-group">
                                        <label id="manufacturer" for="manufacturer">Manufacturer</label>
                                        <select class="form-control scrollable-menu" id="manufacturer-form" name="manufacturer" onchange="newManufacturerEvent()" onfocus="this.size=1;" onchange='this.size=1;'>
                                            <option value="" selected disabled>Select Manufacturer</option>
                                            <option value="0">New Manufacturer</option>
                                            {{#manufacturers}}
                                            <option value="{{id}}">{{name}}</option>
                                            {{/manufacturers}}
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group" id="new-manufacturer" style="display: none;">
                                    <label id="new-manufacturer-label" for="weight">New Manufacturer</label>
                                    <div class="input-group mb-3">
                                    <input type="text" name="new-manufacturer" id="new-manufacturer-form" class="form-control" placeholder="Ex: Intel Corporation" onclick="newManufacturerEvent()"/>
                                    <div class="input-group-append">
                                        <a href="javascript:void(0);" class="input-group-text" id="button-cancel-new-category" onclick="cancelNewManufacturer()">cancel</a>
                                    </div>
                                    </div>
                                </div>
                                <script>
                                    const newManufacturer = document.getElementById("new-manufacturer");
                                    const newManufacturerForm = document.getElementById("new-manufacturer-form");
                                    const existinManufacturer = document.getElementById("existing-manufacturer");
                                    const manufacturerForm = document.getElementById("manufacturer-form");
                                    function newManufacturerEvent() {
                                        if (manufacturerForm.value === "0") {
                                            newManufacturer.style.display = "block";
                                            existinManufacturer.style.display = "none";
                                            return;
                                        }
                                        newManufacturer.style.display = "none";
                                        existinManufacturer.style.display = "block";
                                    }

                                    function cancelNewManufacturer() {
                                        newManufacturerForm.value = null;
                                        newManufacturer.style.display = "none";
                                        existinManufacturer.style.display = "block";
                                        manufacturerForm.selectedIndex = 0;

                                    }
                                </script>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="pengirim-label" for="stock">Stock Amount</label>
                                    <input type="number" name="stock" id="stock-amount-form" class="form-control" placeholder="Ex: 1024"/>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="price_label" for="pengirim">Price</label>
                                    <input type="number" min="0" name="price" id="price-form" class="form-control" placeholder="Ex: 2.240.000 (IDR)"/>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label id="pengirim-label" for="weight">Weight</label>
                                    <input type="text" name="weight" id="weight-form" class="form-control" placeholder="Ex: 1024 (Gram)"/>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div id="existing-category">
                                    <div class="form-group">
                                        <label id="judul-surat-label" for="product_name">Product Category</label>
                                        <select class="form-control scrollable-menu" id="category-form" name="productName" onchange="newCategoryEvent()" onfocus="this.size=1;" onchange='this.size=1;'>
                                            <option value="" selected disabled>Select Category</option>
                                            <option value="0">New Category</option>
                                            {{#categories}}
                                            <option value="{{id}}">{{name}}</option>
                                            {{/categories}}
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group" id="new-category" style="display: none;">
                                    <label id="new-category-label" for="weight">New Category</label>
                                    <div class="input-group mb-3">
                                    <input type="text" name="new-category" id="new-category-form" class="form-control" placeholder="Ex: Processor"/>
                                    <div class="input-group-append">
                                        <a href="javascript:void(0);" class="input-group-text" id="button-cancel-new-category" onclick="cancelNewCategory()">cancel</a>
                                    </div>
                                    </div>
                                </div>
                                <script>
                                    const categorySelect = document.getElementById("category-form");
                                    const existingCategory = document.getElementById("existing-category");
                                    const newCategory = document.getElementById("new-category");
                                    const newCategoryForm = document.getElementById("new-category-form");
                                    function newCategoryEvent() {
                                        if (categorySelect.value === "0") {
                                            existingCategory.style.display = "none";
                                            newCategory.style.display = "block";
                                        } else {
                                            existingCategory.style.display = "block";
                                            newCategory.style.display = "none";
                                        }
                                    }   

                                    function cancelNewCategory() {
                                        newCategoryForm.value = null;
                                        categorySelect.selectedIndex = 0;
                                        existingCategory.style.display = "block";
                                        newCategory.style.display = "none";
                                    }
                                </script>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>Notes <small>(optional)</small></label>
                                    <textarea  id="description-form" class="form-control" name="comment" placeholder="Write somethings..."></textarea>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-2">
                                <button type="submit" id="submit-inventory" class="btn btn-primary btn-block">Upload</button>
                            </div>
                        </div>

                    </form>
                </div>	
            </div>
        </div>
    </div>
</div>

<!-- Modal Edit -->
<div class="modal fade" id="editProductModal" tabindex="-1" role="dialog" aria-labelledby="editProductModalLabel" aria-hidden="true">
    <div class="modal-dialog" style="max-width: 50%;" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body" id="id-product-edit">
          <form>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                      <label for="product-name-edit" class="col-form-label">Name</label>
                      <input type="text" class="form-control" id="product-name-edit" disabled>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="serial-number-edit" class="col-form-label">Serial Number</label>
                        <input type="text" class="form-control" id="serial-number-edit" disabled>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div id="existing-manufacturer-edit-product">
                        <div class="form-group">
                            <label id="manufacturer" for="manufacturer">Manufacturer</label>
                            <select class="form-control scrollable-menu" id="manufacturer-form-edit-product" name="manufacturer" onchange="newManufacturerEventEditProduct()" onfocus="this.size=1;" onchange='this.size=1;' disabled>
                                <option value="" selected disabled>Select Manufacturer</option>
                                <option value="0">New Manufacturer</option>
                                {{#manufacturers}}
                                <option value="{{id}}">{{name}}</option>
                                {{/manufacturers}}
                            </select>
                        </div>
                    </div>
                    <div class="form-group" id="new-manufacturer-edit-product" style="display: none;">
                        <label id="new-manufacturer-edit-product-label" for="weight">New Manufacturer</label>
                        <div class="input-group mb-3">
                        <input type="text" name="new-manufacturer-edit-product" id="new-manufacturer-edit-product-form" class="form-control" placeholder="Ex: Intel Corporation" onclick="newManufacturerEventEditProduct()"/>
                        <div class="input-group-append">
                            <a href="#" class="input-group-text" id="button-cancel-new-category" onclick="cancelNewManufacturerEditProduct()">cancel</a>
                        </div>
                        </div>
                    </div>
                    <script>
                        const newManufacturerEditProduct = document.getElementById("new-manufacturer-edit-product");
                        const newManufacturerFormEditProduct = document.getElementById("new-manufacturer-edit-product-form");
                        const existinManufacturerEditProduct = document.getElementById("existing-manufacturer-edit-product");
                        const manufacturerFormEditProduct = document.getElementById("manufacturer-form-edit-product");
                        function newManufacturerEventEditProduct() {
                            if (manufacturerFormEditProduct.value === "0") {
                                newManufacturerEditProduct.style.display = "block";
                                existinManufacturerEditProduct.style.display = "none";
                                return;
                            }
                            newManufacturer.style.display = "none";
                            existinManufacturerEditProduct.style.display = "block";
                        }

                        function cancelNewManufacturerEditProduct() {
                            newManufacturerFormEditProduct.value = null;
                            newManufacturerEditProduct.style.display = "none";
                            existinManufacturerEditProduct.style.display = "block";
                            manufacturerFormEditProduct.selectedIndex = 0;

                        }
                    </script>
                </div>
                <div class="col-md-6">
                    <div id="existing-category-edit-product">
                        <div class="form-group">
                            <label id="judul-surat-label" for="product_name">Product Category</label>
                            <select class="form-control scrollable-menu" id="category-form-edit-product" name="productName" onchange="newCategoryEventEditProduct()" onfocus="this.size=1;" onchange='this.size=1;' disabled>
                                <option value="" selected disabled>Select Category</option>
                                <option value="0">New Category</option>
                                {{#categories}}
                                <option value="{{id}}">{{name}}</option>
                                {{/categories}}
                            </select>
                        </div>
                    </div>
                    <div class="form-group" id="new-category-edit-product" style="display: none;">
                        <label id="new-category-label" for="weight">New Category</label>
                        <div class="input-group mb-3">
                        <input type="text" name="new-category" id="new-category-form-edit-product" class="form-control" placeholder="Ex: Processor" disabled/>
                        <div class="input-group-append">
                            <a href="#" class="input-group-text" id="button-cancel-new-category" onclick="cancelNewCategoryEditProduct()">cancel</a>
                        </div>
                        </div>
                    </div>
                    <script>
                        const categorySelectEditProduct = document.getElementById("category-form-edit-product");
                        const existingCategoryEditProduct = document.getElementById("existing-category-edit-product");
                        const newCategoryEditProduct = document.getElementById("new-category-edit-product");
                        const newCategoryFormEditProduct = document.getElementById("new-category-form-edit-product");
                        function newCategoryEventEditProduct() {
                            if (categorySelectEditProduct.value === "0") {
                                existingCategoryEditProduct.style.display = "none";
                                newCategoryEditProduct.style.display = "block";
                            } else {
                                existingCategoryEditProduct.style.display = "block";
                                newCategoryEditProduct.style.display = "none";
                            }
                        }   

                        function cancelNewCategoryEditProduct() {
                            newCategoryFormEditProduct.value = null;
                            categorySelectEditProduct.selectedIndex = 0;
                            existingCategoryEditProduct.style.display = "block";
                            newCategoryEditProduct.style.display = "none";
                        }
                    </script>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="weight-product-edit" class="col-form-label">Weight</label>
                        <input type="text" class="form-control" id="weight-product-edit" disabled>
                      </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="price-product-edit" class="col-form-label">Price</label>
                        <input type="text" class="form-control" id="price-product-edit" disabled>
                      </div>
                </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="updateProduct()">Update</button>
        </div>
      </div>
    </div>
</div>
<script>
    // Modal Edit
    function GetDataByID(id) {
        Swal.fire({
            title: 'Loading!',
            html: 'Please wait...',
            icon: 'info',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });
        fetch(`/product/${id}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            },
        })
        .then(res => res.json())
        .then(results => {
            Swal.close(); // Close the loading alert after some time
            console.log(results);
            const idProductEdit = document.getElementById("id-product-edit");
            const productNameEdit = document.getElementById("product-name-edit");
            const serialNumberEdit = document.getElementById("serial-number-edit");
            const weightProductEdit = document.getElementById("weight-product-edit");
            const priceProductEdit = document.getElementById("price-product-edit");
            const manufacturerFormEditProduct = document.getElementById("manufacturer-form-edit-product");
            const categoryFormEditProduct = document.getElementById("category-form-edit-product")

            idProductEdit.removeAttribute("disabled");
            productNameEdit.removeAttribute("disabled");
            serialNumberEdit.removeAttribute("disabled");
            weightProductEdit.removeAttribute("disabled");
            priceProductEdit.removeAttribute("disabled");
            manufacturerFormEditProduct.removeAttribute("disabled");
            categoryFormEditProduct.removeAttribute("disabled");
            
            idProductEdit.setAttribute("data-id-product", results.data.id)
            productNameEdit.value = results.data.name;
            serialNumberEdit.value = results.data.serialNumber;
            weightProductEdit.value = results.data.weight;
            priceProductEdit.value = results.data.price;

            for (let index = 0; index < manufacturerFormEditProduct.length; index++) {
                if (results.data.manufacturerId === parseInt(manufacturerFormEditProduct[index].value)) {
                    manufacturerFormEditProduct.selectedIndex = index;
                }
            }
            for (let index = 0; index < categoryFormEditProduct.length; index++) {
                if (results.data.categoryId === parseInt(categoryFormEditProduct[index].value)) {
                    categoryFormEditProduct.selectedIndex = index  ;
                }
            }
            
        })
        .catch(error => {
            console.error(error);
        })
    }

    function updateProduct() {
        const data = {
            id: GetIdFromDataset(),
            name: document.getElementById("product-name-edit").value,
            serialNumber: document.getElementById("serial-number-edit").value,
            manufacturer: manufacturerFormEditProduct.value === "0" ? newManufacturerFormEditProduct.value : manufacturerFormEditProduct.value,
            price: document.getElementById("price-product-edit").value,
            weight: document.getElementById("weight-product-edit").value,
            category: document.getElementById("category-form-edit-product").value === "0" ? newCategoryFormEditProduct.value : document.getElementById("category-form-edit-product").value,
        }
        Swal.fire({
            title: "Update Product?",
            text: "Make sure the data is correct!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes"
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Loading!',
                    html: 'Please wait...',
                    icon: 'info',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                fetch("/product/update", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },  
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(results => {
                    console.log(results);
                    Swal.close(); // Close the loading alert after some time
                    if (results.status !== 200) {
                        Swal.fire({
                            icon: "error",
                            title: results.error,
                        })
                        return 0;
                    } else {
                        Swal.fire({
                            icon: "success",
                            title: "Success",
                            text: results.message,
                        })
                        .then((result2) => {
                            // Mereload halaman setelah tombol OK diklik
                            if (result2.isConfirmed || result2.isDismissed) {
                                window.location.reload();
                            }
                            return 0;
                        });
                    }
                })
            }
        })
    }
</script>

<script>
    function GetIdFromDataset() {
        return document.getElementById("id-product-edit").dataset.idProduct;
    }

    const submitInventoryButton = document.getElementById("submit-inventory");
    // Send data to server
    submitInventoryButton.addEventListener("click", (e) => {
        e.preventDefault();
        const stockAmountInput = document.getElementById("stock-amount-form");
        const amountStocks = stockAmountInput.value === "" ? "0" : stockAmountInput.value;
        const description = document.getElementById("description-form");
        
        const data = {
            id: document.getElementById('product-name').value,
            amountStocks: amountStocks,
            description: description.value,
        };
        if (data.id === "") {
            Swal.fire({
                icon: "error",
                title: "Form is Empty",
            })
            return 0;
        }

        submitInventoryButton.setAttribute("disabled", true);

        fetch(`/inventory/check/${data.id}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Server returned an error: ${response.status}`);
            }
            return response.json(); // Keep parsing as JSON
        })
        .then(results => {
            console.log(results);
            submitInventoryButton.removeAttribute("disabled");
            if (results.new_product) {
                const serialNumberForm = document.getElementById('serial-number-form');
                const manufacturerForm = document.getElementById('manufacturer-form');
                const priceForm = document.getElementById("price-form");
                const weightForm = document.getElementById("weight-form");
                const stockAmountForm = document.getElementById("stock-amount-form");
                const categorySelect = document.getElementById("category-form");

                const newData = {
                    name: document.getElementById('new-product-form').value,
                    serialNumber: serialNumberForm.value,
                    manufacturer: manufacturerForm.value === "0" ? document.getElementById("new-manufacturer-form").value : manufacturerForm.value,
                    stockAmount: stockAmountForm.value,
                    price: priceForm.value,
                    weight: weightForm.value,
                    category: categorySelect.value === "0" ? document.getElementById("new-category-form").value : categorySelect.value,
                    description: description.value,
                }
                Swal.fire({
                    title: "New Product?",
                    text: "Make sure the data is correct!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes"
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            title: 'Loading!',
                            html: 'Please wait...',
                            icon: 'info',
                            allowOutsideClick: false,
                            showConfirmButton: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });
                        fetch("/product/new", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },  
                            body: JSON.stringify(newData)
                        })
                        .then(response => response.json())
                        .then(results => {
                            console.log(results);
                            Swal.close(); // Close the loading alert after some time
                            if (results.status !== 200) {
                                Swal.fire({
                                    icon: "error",
                                    title: results.error,
                                })
                                return 0;
                            } else {
                                Swal.fire({
                                    icon: "success",
                                    title: "Success",
                                    text: results.message,
                                })
                                .then((result2) => {
                                    // Mereload halaman setelah tombol OK diklik
                                    if (result2.isConfirmed || result2.isDismissed) {
                                        window.location.reload();
                                    }
                                    return 0;
                                });
                            }
                        })
                        .catch(error => {
                            console.log(error);
                            ErrorNotif(error)
                            submitInventoryButton.removeAttribute("disabled");
                        });
                    }
                });
            }
            if (results.is_id_exists) {
                Swal.fire({
                    title: "Update Stocks?",
                    text: "Make sure the data is correct!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes"
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch("/inventory/stocks/update", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(data),
                        })
                        .then(response => response.json())
                        .then(results2 => {
                            console.log(results2)
                            if (results2.status !== 200) {
                                InternalServerError(results2.error)
                                return 0;
                            } else {
                                Swal.fire({
                                    icon: "success",
                                    title: "Success",
                                    text: results2.message,
                                })
                                .then((result2) => {
                                    // Mereload halaman setelah tombol OK diklik
                                    if (result2.isConfirmed || result2.isDismissed) {
                                        window.location.reload();
                                    }
                                    return 0;
                                });
                            }
                        })
                    }
                    return 0;
                });
            }
        })
        .catch(error => {
            console.error(error);
            ErrorNotif(error)
        });

        });
</script>
<script>
    const cardProducts = document.getElementById("card-products");
    const cardAddStocks = document.getElementById("card-add-stocks");
    const addStocksButton = document.getElementById("add-stocks-button")
    // const inventoryButton = document.getElementById("inventory-button");
    const returnButton = document.getElementById("return-button")

    addStocksButton.addEventListener("click", () => {
        cardAddStocks.removeAttribute("hidden");
        returnButton.removeAttribute("hidden");
        addStocksButton.setAttribute("hidden", true);
        cardProducts.setAttribute("hidden",true)
    });
    returnButton.addEventListener("click", () => {
        cardAddStocks.setAttribute("hidden", true);
        returnButton.setAttribute("hidden", true);
        addStocksButton.removeAttribute("hidden");
        cardProducts.removeAttribute("hidden");
    });
</script>